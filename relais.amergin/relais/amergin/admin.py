#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
SHORT DESCRIPTION

"""

### IMPORTS ###

import re

from models import *
from django.contrib import admin
from django.forms import widgets
from django import forms


## CONSTANTS & DEFINES ###

WHITESPACE_REGEX = re.compile (r'\s+')


## IMLEMENTATION ###

class BioseqAnnotationAdminForm(forms.ModelForm):
	class Meta:
		model = BioseqAnnotation

class BioseqAnnotationInline (admin.TabularInline):
	form = BioseqAnnotationAdminForm
	model = BioseqAnnotation
	extra = 0
	verbose_name = "annotation"
	verbose_name_plural = "annotations"
	readonly_fields = [
		'identifier',
	]
	
	def formfield_for_dbfield(self, db_field, **kwargs):
		# sculpt annotation value field to smaller textarea
		if (db_field.attname == 'value'):
			kwargs['widget'] = widgets.Textarea(attrs={'rows': '3', 'cols': '50'})
		# sucessful editting of inlines needs primary key to be passed,
		# but don't want to show it
		#elif (db_field.attname == 'identifier'):
		#	kwargs['widget'] = widgets.HiddenInput
		return super (BioseqAnnotationInline, self).formfield_for_dbfield(
			db_field,**kwargs)


class BioseqAdminForm(forms.ModelForm):
	# We need to makea few changes to the autogenerated admin form for Bioseq:
	# - the identifier must be immutable after creation (editable for a new
	#   bioseq, readonly for all others)
	# - the identifier should be autogenerated if not supplied, and thus not
	#   required.
	
	class Meta:
		model = Bioseq
		
	def __init__ (self, *args, **kwargs):
		super (BioseqAdminForm, self).__init__(*args, **kwargs)
		self.fields['identifier'].required = False
		instance = getattr(self, 'instance', None)
		if instance and instance.identifier:
			self.fields['identifier'].widget.attrs['readonly'] = True
	
	def clean_identifier (self):
		# if a bioseq is created without a identifier, one is given to it
		raw_id = self.cleaned_data['identifier']
		return raw_id or Bioseq.generate_uid()

	def clean_seqdata (self):
		# normalise sequence data
		return  WHITESPACE_REGEX.sub ('', self.cleaned_data['seqdata']).lower()
	
class BioseqAdmin (admin.ModelAdmin):
	form = BioseqAdminForm
	inlines = [
		BioseqAnnotationInline,
	]
	radio_fields = {"seqtype": admin.HORIZONTAL}
	search_fields = ['identifier', 'title', 'description']

admin.site.register (Bioseq, BioseqAdmin)


class BioseqAnnotationAdmin (admin.ModelAdmin):
	pass

admin.site.register (BioseqAnnotation, BioseqAnnotationAdmin)

class BioseqCollectionAdmin (admin.ModelAdmin):
	pass

admin.site.register (BioseqCollection, BioseqCollectionAdmin)

class BioseqCollectionsBioseqAdmin (admin.ModelAdmin):
	pass

admin.site.register (BioseqCollectionsBioseq, BioseqCollectionsBioseqAdmin)

class BioseqExtrefAdmin (admin.ModelAdmin):
	pass

admin.site.register (BioseqExtref, BioseqExtrefAdmin)

class BioseqFeatureAdmin (admin.ModelAdmin):
	pass

admin.site.register (BioseqFeature, BioseqFeatureAdmin)

class BioseqQualifierAdmin (admin.ModelAdmin):
	pass

admin.site.register (BioseqQualifier, BioseqQualifierAdmin)




	

### TEST & DEBUG ###

def _doctest ():
	import doctest
	doctest.testmod ()


### MAIN ###

if __name__ == '__main__':
	_doctest()


### END ####################################################################
