#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
SHORT DESCRIPTION

"""

### IMPORTS ###

import re

from models import *
from django.contrib import admin
from django.forms import widgets
from django import forms


### CONSTANTS & DEFINES ###

WHITESPACE_REGEX = re.compile (r'\s+')


### IMPLEMENTATION ###

### UTILITIES


### BASE ADMIN FORMS

class PrimaryObjectAdminForm (forms.ModelForm):
	"""
	A common base form for editting primary objects.
	"""
	
	# NOTE: derived classes _must_ define model in Meta
		
	def __init__ (self, *args, **kwargs):
		forms.ModelForm.__init__(self, *args, **kwargs)
		self.fields['identifier'].required = False
		instance = getattr(self, 'instance', None)
		if instance and instance.identifier:
			self.fields['identifier'].widget.attrs['readonly'] = True
	
	def clean_identifier (self):
		raw_id = self.cleaned_data['identifier']
		return (raw_id or self.__class__.Meta.model.generate_uid()).strip()

	def clean_title (self):
		return self.cleaned_data['title'].strip()
		
	def clean_description (self):
		return self.cleaned_data['description'].strip()
		
	def clean_source (self):
		return self.cleaned_data['source'].strip()


### Bioseq form and admin model

class BioseqAnnotationAdminForm(forms.ModelForm):
	class Meta:
		model = BioseqAnnotation
		
	# The identifier must be immutable after creation (editable for a new
	#   bioseq, readonly for all others)
	# - the identifier should be autogenerated if not supplied, and thus not
	#   required.
		
	def __init__ (self, *args, **kwargs):
		super (BioseqAnnotationAdminForm, self).__init__(*args, **kwargs)
		uid_field = self.fields['identifier']
		uid_field.required = False
		uid_field.widget.attrs['readonly'] = True
	
	def clean_identifier (self):
		# if a bioseq is created without a identifier, one is given to it
		raw_id = self.cleaned_data['identifier']
		return raw_id or BioseqAnnotation.generate_uid()


class BioseqAnnotationInline (admin.TabularInline):
	form = BioseqAnnotationAdminForm
	model = BioseqAnnotation
	extra = 0
	verbose_name = "annotation"
	verbose_name_plural = "annotations"
	
	def formfield_for_dbfield(self, db_field, **kwargs):
		# Sculpt annotation value field to smaller textarea.
		# This may seem like a good place to hide the identifier (make it a
		# HiddenWidget) but this results in an unsightly form, where the columns
		# don't match the fields below. Make it readonly (in the Django sense)
		# makes it just text, not a form field (readonly means "we just show you
		# the info). Sucessful editting of inlines needs primary key to be passed,
		# so we make it non editable by the user.
		if (db_field.attname == 'value'):
			kwargs['widget'] = widgets.Textarea(attrs={'rows': '3', 'cols': '30'})
		return super (BioseqAnnotationInline, self).formfield_for_dbfield(
			db_field,**kwargs)


# NOTE: don't need until we make a standalone admine form for annotations

#class BioseqAnnotationAdmin (admin.ModelAdmin):
#	pass
#
#admin.site.register (BioseqAnnotation, BioseqAnnotationAdmin)


### Bioseq form and admin model

class BioseqAdminForm(forms.ModelForm):
	# We need to makea few changes to the autogenerated admin form for Bioseq:
	# - the identifier must be immutable after creation (editable for a new
	#   bioseq, readonly for all others)
	# - the identifier should be autogenerated if not supplied, and thus not
	#   required.
	
	class Meta:
		model = Bioseq
		
	def __init__ (self, *args, **kwargs):
		super (BioseqAdminForm, self).__init__(*args, **kwargs)
		self.fields['identifier'].required = False
		instance = getattr(self, 'instance', None)
		if instance and instance.identifier:
			self.fields['identifier'].widget.attrs['readonly'] = True
	
	def clean_identifier (self):
		# if a bioseq is created without a identifier, one is given to it
		raw_id = self.cleaned_data['identifier']
		return raw_id or Bioseq.generate_uid()

	def clean_seqdata (self):
		# normalise sequence data
		return  WHITESPACE_REGEX.sub ('', self.cleaned_data['seqdata']).lower()
	
class BioseqAdmin (admin.ModelAdmin):
	form = BioseqAdminForm
	inlines = [
		BioseqAnnotationInline,
	]
	radio_fields = {"seqtype": admin.HORIZONTAL}
	search_fields = ['identifier', 'title', 'description', 'source']

admin.site.register (Bioseq, BioseqAdmin)


### Bioseq collection form and admin model

class BioseqCollectionMembershipInline (admin.TabularInline):
	#form = BioseqAnnotationAdminForm
	model = BioseqCollection.members.through
	extra = 0
	verbose_name = "member"
	verbose_name_plural = "members"

class BioseqCollectionAdminForm (PrimaryObjectAdminForm):

	class Meta:
		model = BioseqCollection


class BioseqCollectionAdmin (admin.ModelAdmin):
	inlines = [
		BioseqCollectionMembershipInline,
	]
	form = BioseqCollectionAdminForm
	search_fields = ['identifier', 'title', 'description', 'source']

	
admin.site.register (BioseqCollection, BioseqCollectionAdmin)




	

### TEST & DEBUG ###

def _doctest ():
	import doctest
	doctest.testmod ()


### MAIN ###

if __name__ == '__main__':
	_doctest()


### END ####################################################################
